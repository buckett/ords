#summary An outline of proposed changes to schema designer

= Introduction =

The current Schema designer works like this:
  # Load schema from XML
  # User edits schema and saves
  # Updated XML sent to server
  # New schema created based on new XML
  # Data copied from old schema to new schema
  # If 5 is successful, old schema is deleted and new schema is renamed in its place

This provides an all-or-nothing approach which has various problems, for example:
  * It can't tell the different between a table being renamed, or a table being deleted and a new one created (and therefore assumes the latter)
  * Saving changes to a large database takes a long time, since all data must be selected from the old tables and inserted into the new ones.
  * If an invalid schema is created, it's hard to tell the change that caused the problem since several may have been made
  * If data is copied to the new schema in the wrong order, it may fail due to foreign key dependencies not being met

= Proposal =

The proposed changes involve keeping the same interface, but changing the background workflow to speed things up, and make changes more atomic.
  # Clone existing database using a command such as those detailed [http://stackoverflow.com/questions/876522/creating-a-copy-of-a-database-in-postgres here] (this is a lot faster than SELECT/INSERTing each table)
  # Load schema from XML
  # As each edit is made, send appropriate CREATE/ALTER/DELETE TABLE statements to the server, editing the clone's schema, waiting for each command to be processed before another change can be made.
  # If step 3 fails, a useful error message about the operation that just took place is displayed
  # When save is clicked, the saved XML is updated to represent the new schema, the original database is deleted, and the clone is renamed to replace it.